# -*- coding: utf-8 -*- 

print("--- Основы ---\n")
# вывод на экран сообщения '--- Основы ---' и переход на новую строку


## Комментарии

print("Привет, Мир!") # print -- это функция

# print -- это функция
print("Привет, Мир!")


## Литеральные константы

5
1.23
9.25e-3
'Это строка'
"It's a string!"


## Числа

# Числа в Python бывают трёх типов: целые, с плавающей точкой и комплексные.
5
5.3
(-5+4j)


## Строки

# Одинарные кавычки:

# Строку можно указать, используя одинарные кавычки, как например, 
'Фраза в кавычках'
# Все пробелы и знаки табуляции сохранятся, как есть.

# Двойные кавычки:

# Строки в двойных кавычках работают точно так же, как и в одинарных. Например,
"What's your name?"

# Тройные кавычки:

# Можно указывать «многострочные» строки с использованием тройных кавычек ( """ или
# ''' ). В пределах тройных кавычек можно свободно использовать двойные или тройные
# кавычки. Например:

'''Это многострочная строка. Это её первая строка.
Это её вторая строка.
"What's your name?", - спросил я.
Он ответил: "Bond, James Bond."
'''


## Переменные

# Например переменной a присвоим литеральную константу 5 и выведим на экран:
print("\nПеременная A как целое число:")
A = 5
print(A)

print("\nПеременная B как комплексное число:")
B = 1 + 3j
print(B)

# Аналогичным образом мы присваиваем строковую константу переменной s,
print("\nПеременная S как строка:")
S = 'string'
# после чего печатаем её:
print(S)

# пустая строка
print('')

# Ещё примеры
i = 5
print(i)
i = i + 1
print(i)
s = '''Это многострочная строка.
Это вторая её строчка.'''
print(s)

# Вывод на экран двух переменных
s = 'a ='
print(s, A)

Str = 'Word'
print(Str, A, B)

# Можно перечислить переменные через запятую
a, b, c = 5, 6, 7
res = a - b + c
print("5 - 6 + 7 =", res)

# Переменные – это частный случай идентификаторов. Идентификаторы – это имена, 
# присвоенные чему-то для его обозначения. При выборе имён для идентификаторов 
# необходимо соблюдать следующие правила:
#   • Первым символом идентификатора должна быть буква из алфавита (символ ASCII
#   в верхнем или нижнем регистре, или символ Unicode), а также символ 
#   подчёркивания (“_”).
#   • Остальная часть идентификатора может состоять из букв (символы ASCII 
#   в верхнем или нижнем регистре, а также символы Unicode), знаков 
#   подчёркивания (“_”) или цифр (0-9).
#   • Имена идентификаторов чувствительны к регистру. Например, myname и myName –
#   это не одно и то же. Обратите внимание на “ n ” в нижнем регистре в первом 
#   случае и “ N ” в верхнем во втором.
#   • Примеры допустимых имён идентификаторов: i , __my_name , name_23 , a1b2_c3
#   и любые_символы_utf8_δξѪђёўЩӆΞέά .
#   • Примеры недопустимых имён идентификаторов: 2things , здесь есть пробелы,
#   myname , >a1b2_c3 и "это_в_кавычках" .


## Логические и физические строки

# Например,
i = 5
print(i)
# то же самое, что
i = 5;
print(i);
# и то же самое может быть записано в виде
i = 5; print(i);
# или даже
i = 5; print(i)

# Явное объединение строк:
s = 'Это строка. \
Это строка продолжается.'
print(s)

# Аналогично,
print\
(i)


## Отступы

# В Python пробелы важны. Точнее, пробелы в начале строки важны. Это называется
# отступами. Передние отступы (пробелы и табуляции) в начале логической строки 
# используются для определения уровня отступа логической строки, который, 
# в свою очередь, используется для группировки предложений.
# Вы должны запомнить, что неправильные отступы могут приводить к возникновению
# ошибок. Например:

i = 5
# Строчка ниже закомментирована, разкомментируйте, чтобы проверить эту ошибку
# print('Значение составляет ', i) # Ошибка! Пробел в начале строки
print('Я повторяю, значение составляет ', i)

print("\n--- End ---")
